crear la url o rutas de nuestro servidor

router.post("/users/signup", async(req, res) => {
    const { name, email, password, confirme_password } = req.body;
    const errors = [];
    if (name.length <= 0) {
        errors.push({ text: "Indicar nombre" });
    }
    if (email.length <= 0) {
        errors.push({ text: "Indicar email" })
    }
    if (password.length <= 0) {
        errors.push({ text: "Indicar Contraseña" })
    }
    if (password != confirme_password) {
        errors.push({ text: "La contraseña no coinciden" });
    }
    if (password.length <= 4) {
        errors.push({ text: "La contraseña debe ser mayor a 4 digitos" });
    }
    if (errors.length > 0) {
        res.render("users/signup", { errors, name, email, password, confirme_password });
    } else {
        const emailUser = await User.findOne({email: email});
        if(emailUser){
            errors.push({text: "El email se encuentra en uso"})
            res.render("users/signup", { errors, name, email, password, confirme_password });
        }else{
            const newUser = new User({name, email, password});
            newUser.password = await newUser.encryptPassword(password)
            await newUser.save();
            req.flash("exito_not", "Se Registro Exitosamente");
            res.redirect("/users/signin");
        }
        
    }
})


    body("email").custom(value => {
        return User.findUserByEmail(value).then(user => {
            if(user) {
                return Promise.reject("El email se encuentra en uso.")
            }
        });
    }),

    const { signup, validationResult, body, check } = require("express-validator");

router.post("/users/signup", [
    check("name").isLength({ min: 4 }),
    check("email").isEmail(),
    check("password").isLength({min: 5 })
],(req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()){
        return res.status(400).json({ erros: errors.array() });
    }

User.create({
    name: req.body.name,
    email: req.body.name,
    password: req.body.name,
}).then(user => res.json(user));
});




express-validator

const { body, validationResult } = require("express-validator");
router.post(
  "/users/signup",
  [
    body("name").isLength({ min: 2 }).withMessage("El nombre debe ser mayor a dos caracteres."),

    body("password").isLength({ min: 5 }).withMessage("La contraseña debe ser mayor a 5 caracteres."),

    body("confirme_password").custom((password, {req}) =>{
      if(password !== req.body.password) {
        throw new Error("La contraseña no coinciden.");
      }
      return true;
    }),
    body("email").isEmail().custom(email =>{
      return User.findOne({email : email}).then(users =>{
        if(users) {
          return Promise.reject("Correo electrónico se encuentra en uso.");
        }
      })
    })
  ],
  async (req, res) =>{
    const { name, email, password, confirme_password } = req.body;
    // Finds the validation errors in this request and wraps them in an object with handy functions
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({errors: errors.array()});
      //res.render("users/signup", {errors, name, email, password, confirme_password });
    }
    const newUser = new User({name, email, password});
    newUser.password = await newUser.encryptPassword(password)
    await newUser.save();
    req.flash("exito_not", "Se Registro Exitosamente");
    res.redirect("/users/signin");
  }
);